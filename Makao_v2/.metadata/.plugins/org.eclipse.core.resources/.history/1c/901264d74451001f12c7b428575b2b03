package server;

import shared.Card;
import shared.CardStack;
import shared.Request;

public class RequestsQueue {

	private CardStack stack = null;
	private Request incomming = null;
	private Request generated = null;
	public void setCards(CardStack stack)
	{
		this.stack = stack;
	}

	public void setPlayerRequest(Request request)
	{
		// TODO Auto-generated method stub
	    incomming = request;	
	}
	public void generateRequest() {
		if (stack!=null)
		{
			if (incomming!=null)
			{
				if (incomming.getID()==Request.REQUEST_CARD_NAME || incomming.getID()==Request.REQUEST_CARD_SUIT)
					generated = incomming;
				//put.(generated,1);
			}
			else 
			{
			    Card card = stack.getArray()[stack.getCount()-1];
			    if (card.getName().equals(Card.Name.FOUR))
			    {
			    	generated = new Request(Request.REQUEST_CARD_NAME,Card.Name.FOUR);
			    }
			    else 
			    	if (card.getName().equals(Card.Name.TWO))
				    {
			    		generated = new Request(Request.REQUEST_CARD_NAME,Card.Name.TWO);
				    }
			    	else 
			    		if (card.getName().equals(Card.Name.THREE))
					    {
			    			generated = new Request(Request.REQUEST_CARD_NAME,Card.Name.THREE);
					    }
			    		else 
			    			if (card.getName().equals(Card.Name.KING) && card.getSuit().equals(Card.Suit.HEART))
						    {
			    				generated = new Request(Request.REQUEST_TAKE,new Integer(5));
						    }
			    			else 
			    				if (card.getName().equals(Card.Name.KING) && card.getSuit().equals(Card.Suit.SPADE))
							    {
			    					generated = new Request(Request.REQUEST_TAKE,new Integer(5));
							    }
			}
	
		}
	}

	public Request getRequest() {
		// TODO Auto-generated method stub
		return generated;
	}

}
